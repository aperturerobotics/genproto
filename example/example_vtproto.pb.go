// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.5.0
// source: github.com/aperturerobotics/protobuf-project/example/example.proto

package example

import (
	context "context"
	fmt "fmt"
	io "io"
	bits "math/bits"

	other "github.com/aperturerobotics/protobuf-project/example/other"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *EchoMsg) CloneVT() *EchoMsg {
	if m == nil {
		return (*EchoMsg)(nil)
	}
	r := &EchoMsg{
		Body: m.Body,
	}
	if rhs := m.OtherMessage; rhs != nil {
		if vtpb, ok := interface{}(rhs).(interface{ CloneVT() *other.OtherMessage }); ok {
			r.OtherMessage = vtpb.CloneVT()
		} else {
			r.OtherMessage = proto.Clone(rhs).(*other.OtherMessage)
		}
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *EchoMsg) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (this *EchoMsg) EqualVT(that *EchoMsg) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Body != that.Body {
		return false
	}
	if equal, ok := interface{}(this.OtherMessage).(interface {
		EqualVT(*other.OtherMessage) bool
	}); ok {
		if !equal.EqualVT(that.OtherMessage) {
			return false
		}
	} else if !proto.Equal(this.OtherMessage, that.OtherMessage) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *EchoMsg) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*EchoMsg)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EchoerClient is the client API for Echoer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EchoerClient interface {
	// Echo returns the given message.
	Echo(ctx context.Context, in *EchoMsg, opts ...grpc.CallOption) (*EchoMsg, error)
	// EchoServerStream is an example of a server -> client one-way stream.
	EchoServerStream(ctx context.Context, in *EchoMsg, opts ...grpc.CallOption) (Echoer_EchoServerStreamClient, error)
	// EchoClientStream is an example of client->server one-way stream.
	EchoClientStream(ctx context.Context, opts ...grpc.CallOption) (Echoer_EchoClientStreamClient, error)
	// EchoBidiStream is an example of a two-way stream.
	EchoBidiStream(ctx context.Context, opts ...grpc.CallOption) (Echoer_EchoBidiStreamClient, error)
}

type echoerClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoerClient(cc grpc.ClientConnInterface) EchoerClient {
	return &echoerClient{cc}
}

func (c *echoerClient) Echo(ctx context.Context, in *EchoMsg, opts ...grpc.CallOption) (*EchoMsg, error) {
	out := new(EchoMsg)
	err := c.cc.Invoke(ctx, "/example.Echoer/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoerClient) EchoServerStream(ctx context.Context, in *EchoMsg, opts ...grpc.CallOption) (Echoer_EchoServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Echoer_ServiceDesc.Streams[0], "/example.Echoer/EchoServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoerEchoServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Echoer_EchoServerStreamClient interface {
	Recv() (*EchoMsg, error)
	grpc.ClientStream
}

type echoerEchoServerStreamClient struct {
	grpc.ClientStream
}

func (x *echoerEchoServerStreamClient) Recv() (*EchoMsg, error) {
	m := new(EchoMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoerClient) EchoClientStream(ctx context.Context, opts ...grpc.CallOption) (Echoer_EchoClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Echoer_ServiceDesc.Streams[1], "/example.Echoer/EchoClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoerEchoClientStreamClient{stream}
	return x, nil
}

type Echoer_EchoClientStreamClient interface {
	Send(*EchoMsg) error
	CloseAndRecv() (*EchoMsg, error)
	grpc.ClientStream
}

type echoerEchoClientStreamClient struct {
	grpc.ClientStream
}

func (x *echoerEchoClientStreamClient) Send(m *EchoMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoerEchoClientStreamClient) CloseAndRecv() (*EchoMsg, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EchoMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoerClient) EchoBidiStream(ctx context.Context, opts ...grpc.CallOption) (Echoer_EchoBidiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Echoer_ServiceDesc.Streams[2], "/example.Echoer/EchoBidiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoerEchoBidiStreamClient{stream}
	return x, nil
}

type Echoer_EchoBidiStreamClient interface {
	Send(*EchoMsg) error
	Recv() (*EchoMsg, error)
	grpc.ClientStream
}

type echoerEchoBidiStreamClient struct {
	grpc.ClientStream
}

func (x *echoerEchoBidiStreamClient) Send(m *EchoMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoerEchoBidiStreamClient) Recv() (*EchoMsg, error) {
	m := new(EchoMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoerServer is the server API for Echoer service.
// All implementations must embed UnimplementedEchoerServer
// for forward compatibility
type EchoerServer interface {
	// Echo returns the given message.
	Echo(context.Context, *EchoMsg) (*EchoMsg, error)
	// EchoServerStream is an example of a server -> client one-way stream.
	EchoServerStream(*EchoMsg, Echoer_EchoServerStreamServer) error
	// EchoClientStream is an example of client->server one-way stream.
	EchoClientStream(Echoer_EchoClientStreamServer) error
	// EchoBidiStream is an example of a two-way stream.
	EchoBidiStream(Echoer_EchoBidiStreamServer) error
	mustEmbedUnimplementedEchoerServer()
}

// UnimplementedEchoerServer must be embedded to have forward compatible implementations.
type UnimplementedEchoerServer struct {
}

func (UnimplementedEchoerServer) Echo(context.Context, *EchoMsg) (*EchoMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedEchoerServer) EchoServerStream(*EchoMsg, Echoer_EchoServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EchoServerStream not implemented")
}
func (UnimplementedEchoerServer) EchoClientStream(Echoer_EchoClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EchoClientStream not implemented")
}
func (UnimplementedEchoerServer) EchoBidiStream(Echoer_EchoBidiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EchoBidiStream not implemented")
}
func (UnimplementedEchoerServer) mustEmbedUnimplementedEchoerServer() {}

// UnsafeEchoerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EchoerServer will
// result in compilation errors.
type UnsafeEchoerServer interface {
	mustEmbedUnimplementedEchoerServer()
}

func RegisterEchoerServer(s grpc.ServiceRegistrar, srv EchoerServer) {
	s.RegisterService(&Echoer_ServiceDesc, srv)
}

func _Echoer_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoerServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.Echoer/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoerServer).Echo(ctx, req.(*EchoMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Echoer_EchoServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EchoMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EchoerServer).EchoServerStream(m, &echoerEchoServerStreamServer{stream})
}

type Echoer_EchoServerStreamServer interface {
	Send(*EchoMsg) error
	grpc.ServerStream
}

type echoerEchoServerStreamServer struct {
	grpc.ServerStream
}

func (x *echoerEchoServerStreamServer) Send(m *EchoMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _Echoer_EchoClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoerServer).EchoClientStream(&echoerEchoClientStreamServer{stream})
}

type Echoer_EchoClientStreamServer interface {
	SendAndClose(*EchoMsg) error
	Recv() (*EchoMsg, error)
	grpc.ServerStream
}

type echoerEchoClientStreamServer struct {
	grpc.ServerStream
}

func (x *echoerEchoClientStreamServer) SendAndClose(m *EchoMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoerEchoClientStreamServer) Recv() (*EchoMsg, error) {
	m := new(EchoMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Echoer_EchoBidiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoerServer).EchoBidiStream(&echoerEchoBidiStreamServer{stream})
}

type Echoer_EchoBidiStreamServer interface {
	Send(*EchoMsg) error
	Recv() (*EchoMsg, error)
	grpc.ServerStream
}

type echoerEchoBidiStreamServer struct {
	grpc.ServerStream
}

func (x *echoerEchoBidiStreamServer) Send(m *EchoMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoerEchoBidiStreamServer) Recv() (*EchoMsg, error) {
	m := new(EchoMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Echoer_ServiceDesc is the grpc.ServiceDesc for Echoer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Echoer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.Echoer",
	HandlerType: (*EchoerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Echoer_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EchoServerStream",
			Handler:       _Echoer_EchoServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EchoClientStream",
			Handler:       _Echoer_EchoClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "EchoBidiStream",
			Handler:       _Echoer_EchoBidiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/aperturerobotics/protobuf-project/example/example.proto",
}

func (m *EchoMsg) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EchoMsg) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *EchoMsg) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.OtherMessage != nil {
		if vtmsg, ok := interface{}(m.OtherMessage).(interface {
			MarshalToSizedBufferVT([]byte) (int, error)
		}); ok {
			size, err := vtmsg.MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarint(dAtA, i, uint64(size))
		} else {
			encoded, err := proto.Marshal(m.OtherMessage)
			if err != nil {
				return 0, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = encodeVarint(dAtA, i, uint64(len(encoded)))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarint(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarint(dAtA []byte, offset int, v uint64) int {
	offset -= sov(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EchoMsg) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	if m.OtherMessage != nil {
		if size, ok := interface{}(m.OtherMessage).(interface {
			SizeVT() int
		}); ok {
			l = size.SizeVT()
		} else {
			l = proto.Size(m.OtherMessage)
		}
		n += 1 + l + sov(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func sov(x uint64) (n int) {
	return (bits.Len64(x|1) + 6) / 7
}
func soz(x uint64) (n int) {
	return sov(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EchoMsg) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EchoMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EchoMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OtherMessage == nil {
				m.OtherMessage = &other.OtherMessage{}
			}
			if unmarshal, ok := interface{}(m.OtherMessage).(interface {
				UnmarshalVT([]byte) error
			}); ok {
				if err := unmarshal.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				if err := proto.Unmarshal(dAtA[iNdEx:postIndex], m.OtherMessage); err != nil {
					return err
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skip(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLength
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroup
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLength
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLength        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflow          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroup = fmt.Errorf("proto: unexpected end of group")
)
