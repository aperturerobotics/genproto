// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package example

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EchoerClient is the client API for Echoer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EchoerClient interface {
	// Echo returns the given message.
	Echo(ctx context.Context, in *EchoMsg, opts ...grpc.CallOption) (*EchoMsg, error)
	// EchoServerStream is an example of a server -> client one-way stream.
	EchoServerStream(ctx context.Context, in *EchoMsg, opts ...grpc.CallOption) (Echoer_EchoServerStreamClient, error)
	// EchoClientStream is an example of client->server one-way stream.
	EchoClientStream(ctx context.Context, opts ...grpc.CallOption) (Echoer_EchoClientStreamClient, error)
	// EchoBidiStream is an example of a two-way stream.
	EchoBidiStream(ctx context.Context, opts ...grpc.CallOption) (Echoer_EchoBidiStreamClient, error)
}

type echoerClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoerClient(cc grpc.ClientConnInterface) EchoerClient {
	return &echoerClient{cc}
}

func (c *echoerClient) Echo(ctx context.Context, in *EchoMsg, opts ...grpc.CallOption) (*EchoMsg, error) {
	out := new(EchoMsg)
	err := c.cc.Invoke(ctx, "/example.Echoer/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoerClient) EchoServerStream(ctx context.Context, in *EchoMsg, opts ...grpc.CallOption) (Echoer_EchoServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Echoer_ServiceDesc.Streams[0], "/example.Echoer/EchoServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoerEchoServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Echoer_EchoServerStreamClient interface {
	Recv() (*EchoMsg, error)
	grpc.ClientStream
}

type echoerEchoServerStreamClient struct {
	grpc.ClientStream
}

func (x *echoerEchoServerStreamClient) Recv() (*EchoMsg, error) {
	m := new(EchoMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoerClient) EchoClientStream(ctx context.Context, opts ...grpc.CallOption) (Echoer_EchoClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Echoer_ServiceDesc.Streams[1], "/example.Echoer/EchoClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoerEchoClientStreamClient{stream}
	return x, nil
}

type Echoer_EchoClientStreamClient interface {
	Send(*EchoMsg) error
	CloseAndRecv() (*EchoMsg, error)
	grpc.ClientStream
}

type echoerEchoClientStreamClient struct {
	grpc.ClientStream
}

func (x *echoerEchoClientStreamClient) Send(m *EchoMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoerEchoClientStreamClient) CloseAndRecv() (*EchoMsg, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EchoMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoerClient) EchoBidiStream(ctx context.Context, opts ...grpc.CallOption) (Echoer_EchoBidiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Echoer_ServiceDesc.Streams[2], "/example.Echoer/EchoBidiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoerEchoBidiStreamClient{stream}
	return x, nil
}

type Echoer_EchoBidiStreamClient interface {
	Send(*EchoMsg) error
	Recv() (*EchoMsg, error)
	grpc.ClientStream
}

type echoerEchoBidiStreamClient struct {
	grpc.ClientStream
}

func (x *echoerEchoBidiStreamClient) Send(m *EchoMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoerEchoBidiStreamClient) Recv() (*EchoMsg, error) {
	m := new(EchoMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoerServer is the server API for Echoer service.
// All implementations must embed UnimplementedEchoerServer
// for forward compatibility
type EchoerServer interface {
	// Echo returns the given message.
	Echo(context.Context, *EchoMsg) (*EchoMsg, error)
	// EchoServerStream is an example of a server -> client one-way stream.
	EchoServerStream(*EchoMsg, Echoer_EchoServerStreamServer) error
	// EchoClientStream is an example of client->server one-way stream.
	EchoClientStream(Echoer_EchoClientStreamServer) error
	// EchoBidiStream is an example of a two-way stream.
	EchoBidiStream(Echoer_EchoBidiStreamServer) error
	mustEmbedUnimplementedEchoerServer()
}

// UnimplementedEchoerServer must be embedded to have forward compatible implementations.
type UnimplementedEchoerServer struct {
}

func (UnimplementedEchoerServer) Echo(context.Context, *EchoMsg) (*EchoMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedEchoerServer) EchoServerStream(*EchoMsg, Echoer_EchoServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EchoServerStream not implemented")
}
func (UnimplementedEchoerServer) EchoClientStream(Echoer_EchoClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EchoClientStream not implemented")
}
func (UnimplementedEchoerServer) EchoBidiStream(Echoer_EchoBidiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EchoBidiStream not implemented")
}
func (UnimplementedEchoerServer) mustEmbedUnimplementedEchoerServer() {}

// UnsafeEchoerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EchoerServer will
// result in compilation errors.
type UnsafeEchoerServer interface {
	mustEmbedUnimplementedEchoerServer()
}

func RegisterEchoerServer(s grpc.ServiceRegistrar, srv EchoerServer) {
	s.RegisterService(&Echoer_ServiceDesc, srv)
}

func _Echoer_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoerServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.Echoer/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoerServer).Echo(ctx, req.(*EchoMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Echoer_EchoServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EchoMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EchoerServer).EchoServerStream(m, &echoerEchoServerStreamServer{stream})
}

type Echoer_EchoServerStreamServer interface {
	Send(*EchoMsg) error
	grpc.ServerStream
}

type echoerEchoServerStreamServer struct {
	grpc.ServerStream
}

func (x *echoerEchoServerStreamServer) Send(m *EchoMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _Echoer_EchoClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoerServer).EchoClientStream(&echoerEchoClientStreamServer{stream})
}

type Echoer_EchoClientStreamServer interface {
	SendAndClose(*EchoMsg) error
	Recv() (*EchoMsg, error)
	grpc.ServerStream
}

type echoerEchoClientStreamServer struct {
	grpc.ServerStream
}

func (x *echoerEchoClientStreamServer) SendAndClose(m *EchoMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoerEchoClientStreamServer) Recv() (*EchoMsg, error) {
	m := new(EchoMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Echoer_EchoBidiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoerServer).EchoBidiStream(&echoerEchoBidiStreamServer{stream})
}

type Echoer_EchoBidiStreamServer interface {
	Send(*EchoMsg) error
	Recv() (*EchoMsg, error)
	grpc.ServerStream
}

type echoerEchoBidiStreamServer struct {
	grpc.ServerStream
}

func (x *echoerEchoBidiStreamServer) Send(m *EchoMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoerEchoBidiStreamServer) Recv() (*EchoMsg, error) {
	m := new(EchoMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Echoer_ServiceDesc is the grpc.ServiceDesc for Echoer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Echoer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.Echoer",
	HandlerType: (*EchoerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Echoer_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EchoServerStream",
			Handler:       _Echoer_EchoServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EchoClientStream",
			Handler:       _Echoer_EchoClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "EchoBidiStream",
			Handler:       _Echoer_EchoBidiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/aperturerobotics/protobuf-project/example/example.proto",
}
